name: Azure Static Web Apps CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [ main ]

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) App-Pfad automatisch finden (dort, wo package.json liegt)
      - name: Detect app path
        id: app
        run: |
          set -e
          # Kandidatenliste – erweitere bei Bedarf
          CANDIDATES=(
            "."
            "src"
            "app"
            "web"
            "client"
            "frontend"
            "site"
          )
          for d in "${CANDIDATES[@]}"; do
            if [ -f "$d/package.json" ]; then
              echo "path=$d" >> "$GITHUB_OUTPUT"
              echo "lock=$d/package-lock.json" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          done
          echo "Keine package.json gefunden. Bitte App-Verzeichnis prüfen." >&2
          exit 1

      # 2) Node 20 bereitstellen + npm-Cache auf Basis des Lockfiles (falls vorhanden)
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          # cache-dependency-path darf NICHT ins Leere zeigen – daher 2 Pfade:
          # (a) erkanntes package-lock.json
          # (b) Fallbacks, falls kein Lockfile committed ist
          cache-dependency-path: |
            ${{ steps.app.outputs.lock }}
            package-lock.json
            npm-shrinkwrap.json

      # 3) Install & Build im gefundenen App-Pfad
      - name: Install & Build
        working-directory: ${{ steps.app.outputs.path }}
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            # Falls kein Lockfile committed ist
            npm install
          fi
          npm run build

      # 4) Deploy zur Azure Static Web App (nur Upload – kein zweiter Build)
      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PROUD_RIVER_01FF01803 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: ${{ steps.app.outputs.path }}
          output_location: "${{ steps.app.outputs.path }}/build"
          skip_app_build: true
        env:
          NODE_VERSION: '20'
          WEBSITE_NODE_DEFAULT_VERSION: '20'

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_PROUD_RIVER_01FF01803 }}
          action: "close"
